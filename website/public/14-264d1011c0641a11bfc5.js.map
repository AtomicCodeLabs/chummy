{"version":3,"sources":["webpack:///./node_modules/@firebase/analytics/dist/index.esm.js"],"names":["GtagCommand","EventName","GTAG_URL","logger","gtagOnConfig","gtagCore","initializationPromisesMap","dynamicConfigPromisesList","measurementIdToAppId","measurementId","gtagParams","this","correspondingAppId","dynamicConfigResults","foundConfig","e_1","_a","label","trys","push","sent","Promise","all","find","config","appId","error","CONFIG","gtagOnEvent","initializationPromisesToWaitFor","gaSendToList","_loop_1","_i","gaSendToList_1","sendToId","e_2","Array","isArray","initializationPromise","length","Object","values","EVENT","wrapOrCreateGtag","dataLayerName","gtagFunctionName","_args","arguments","window","command","idOrNameOrParams","e_3","SET","wrapGtag","wrappedGtag","ERRORS","ERROR_FACTORY","defaultRetryData","RetryData","throttleMetadata","intervalMillis","prototype","getThrottleMetadata","setThrottleMetadata","metadata","deleteThrottleMetadata","getHeaders","apiKey","Headers","Accept","fetchDynamicConfig","appFields","request","appUrl","response","errorMessage","jsonResponse","_b","method","headers","replace","fetch","status","json","message","create","httpStatus","responseMessage","attemptFetchDynamicConfigWithRetry","signal","retryData","throttleEndTimeMillis","backoffCount","backoffMillis","setAbortableTimeout","warn","e","customData","Number","isRetriableError","Date","now","debug","resolve","reject","Math","max","timeout","setTimeout","addEventListener","clearTimeout","AnalyticsAbortSignal","listeners","listener","abort","forEach","initializeIds","app","installations","dynamicConfigPromise","fidPromise","dynamicConfig","fid","configProperties","_c","timeoutMillis","_this","options","undefined","fetchDynamicConfigWithRetry","then","catch","errorInfo","validateIndexedDB","envIsValid","getId","update","gtagCoreFunction","wrappedGtagFunction","gtagName","globalInitDone","settings","factory","mismatchedEnvMessages","details","map","index","join","err","warnOnBrowserContextMismatch","id","scriptTags","document","getElementsByTagName","tag","src","includes","findGtagScriptOnPage","script","createElement","async","head","appendChild","insertScriptTag","dataLayer","getOrCreateDataLayer","logEvent","eventName","eventParams","gtagFunction","params","global","_logEvent","setCurrentScreen","screenName","_setCurrentScreen","setUserId","_setUserId","setUserProperties","properties","flatProperties","key","keys","_setUserProperties","setAnalyticsCollectionEnabled","enabled","_setAnalyticsCollectionEnabled","INTERNAL","delete","instance","isSupported","registerComponent","container","getProvider","getImmediate","setServiceProps","reason","registerVersion"],"mappings":"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","file":"14-264d1011c0641a11bfc5.js","sourcesContent":["import { __awaiter, __generator, __assign } from 'tslib';\nimport firebase from '@firebase/app';\nimport '@firebase/installations';\nimport { Logger } from '@firebase/logger';\nimport { ErrorFactory, calculateBackoffMillis, FirebaseError, validateIndexedDBOpenable, isIndexedDBAvailable, isBrowserExtension, areCookiesEnabled } from '@firebase/util';\nimport { Component } from '@firebase/component';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Key to attach FID to in gtag params.\n\nvar GA_FID_KEY = 'firebase_id';\nvar ORIGIN_KEY = 'origin';\nvar FETCH_TIMEOUT_MILLIS = 60 * 1000;\nvar DYNAMIC_CONFIG_URL = 'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\nvar GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\nvar GtagCommand;\n\n(function (GtagCommand) {\n  GtagCommand[\"EVENT\"] = \"event\";\n  GtagCommand[\"SET\"] = \"set\";\n  GtagCommand[\"CONFIG\"] = \"config\";\n})(GtagCommand || (GtagCommand = {}));\n/*\r\n * Officially recommended event names for gtag.js\r\n * Any other string is also allowed.\r\n */\n\n\nvar EventName;\n\n(function (EventName) {\n  EventName[\"ADD_SHIPPING_INFO\"] = \"add_shipping_info\";\n  EventName[\"ADD_PAYMENT_INFO\"] = \"add_payment_info\";\n  EventName[\"ADD_TO_CART\"] = \"add_to_cart\";\n  EventName[\"ADD_TO_WISHLIST\"] = \"add_to_wishlist\";\n  EventName[\"BEGIN_CHECKOUT\"] = \"begin_checkout\";\n  /** @deprecated */\n\n  EventName[\"CHECKOUT_PROGRESS\"] = \"checkout_progress\";\n  EventName[\"EXCEPTION\"] = \"exception\";\n  EventName[\"GENERATE_LEAD\"] = \"generate_lead\";\n  EventName[\"LOGIN\"] = \"login\";\n  EventName[\"PAGE_VIEW\"] = \"page_view\";\n  EventName[\"PURCHASE\"] = \"purchase\";\n  EventName[\"REFUND\"] = \"refund\";\n  EventName[\"REMOVE_FROM_CART\"] = \"remove_from_cart\";\n  EventName[\"SCREEN_VIEW\"] = \"screen_view\";\n  EventName[\"SEARCH\"] = \"search\";\n  EventName[\"SELECT_CONTENT\"] = \"select_content\";\n  EventName[\"SELECT_ITEM\"] = \"select_item\";\n  EventName[\"SELECT_PROMOTION\"] = \"select_promotion\";\n  /** @deprecated */\n\n  EventName[\"SET_CHECKOUT_OPTION\"] = \"set_checkout_option\";\n  EventName[\"SHARE\"] = \"share\";\n  EventName[\"SIGN_UP\"] = \"sign_up\";\n  EventName[\"TIMING_COMPLETE\"] = \"timing_complete\";\n  EventName[\"VIEW_CART\"] = \"view_cart\";\n  EventName[\"VIEW_ITEM\"] = \"view_item\";\n  EventName[\"VIEW_ITEM_LIST\"] = \"view_item_list\";\n  EventName[\"VIEW_PROMOTION\"] = \"view_promotion\";\n  EventName[\"VIEW_SEARCH_RESULTS\"] = \"view_search_results\";\n})(EventName || (EventName = {}));\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Logs an analytics event through the Firebase SDK.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\r\n * @param eventParams Analytics event parameters.\r\n */\n\n\nfunction _logEvent(gtagFunction, initializationPromise, eventName, eventParams, options) {\n  return __awaiter(this, void 0, void 0, function () {\n    var measurementId, params;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!(options && options.global)) return [3\n          /*break*/\n          , 1];\n          gtagFunction(GtagCommand.EVENT, eventName, eventParams);\n          return [2\n          /*return*/\n          ];\n\n        case 1:\n          return [4\n          /*yield*/\n          , initializationPromise];\n\n        case 2:\n          measurementId = _a.sent();\n          params = __assign(__assign({}, eventParams), {\n            'send_to': measurementId\n          });\n          gtagFunction(GtagCommand.EVENT, eventName, params);\n          _a.label = 3;\n\n        case 3:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * Set screen_name parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param screenName Screen name string to set.\r\n */\n\n\nfunction _setCurrentScreen(gtagFunction, initializationPromise, screenName, options) {\n  return __awaiter(this, void 0, void 0, function () {\n    var measurementId;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!(options && options.global)) return [3\n          /*break*/\n          , 1];\n          gtagFunction(GtagCommand.SET, {\n            'screen_name': screenName\n          });\n          return [2\n          /*return*/\n          , Promise.resolve()];\n\n        case 1:\n          return [4\n          /*yield*/\n          , initializationPromise];\n\n        case 2:\n          measurementId = _a.sent();\n          gtagFunction(GtagCommand.CONFIG, measurementId, {\n            update: true,\n            'screen_name': screenName\n          });\n          _a.label = 3;\n\n        case 3:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * Set user_id parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param id User ID string to set\r\n */\n\n\nfunction _setUserId(gtagFunction, initializationPromise, id, options) {\n  return __awaiter(this, void 0, void 0, function () {\n    var measurementId;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!(options && options.global)) return [3\n          /*break*/\n          , 1];\n          gtagFunction(GtagCommand.SET, {\n            'user_id': id\n          });\n          return [2\n          /*return*/\n          , Promise.resolve()];\n\n        case 1:\n          return [4\n          /*yield*/\n          , initializationPromise];\n\n        case 2:\n          measurementId = _a.sent();\n          gtagFunction(GtagCommand.CONFIG, measurementId, {\n            update: true,\n            'user_id': id\n          });\n          _a.label = 3;\n\n        case 3:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * Set all other user properties other than user_id and screen_name.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param properties Map of user properties to set\r\n */\n\n\nfunction _setUserProperties(gtagFunction, initializationPromise, properties, options) {\n  return __awaiter(this, void 0, void 0, function () {\n    var flatProperties, _i, _a, key, measurementId;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          if (!(options && options.global)) return [3\n          /*break*/\n          , 1];\n          flatProperties = {};\n\n          for (_i = 0, _a = Object.keys(properties); _i < _a.length; _i++) {\n            key = _a[_i]; // use dot notation for merge behavior in gtag.js\n\n            flatProperties[\"user_properties.\" + key] = properties[key];\n          }\n\n          gtagFunction(GtagCommand.SET, flatProperties);\n          return [2\n          /*return*/\n          , Promise.resolve()];\n\n        case 1:\n          return [4\n          /*yield*/\n          , initializationPromise];\n\n        case 2:\n          measurementId = _b.sent();\n          gtagFunction(GtagCommand.CONFIG, measurementId, {\n            update: true,\n            'user_properties': properties\n          });\n          _b.label = 3;\n\n        case 3:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * Set whether collection is enabled for this ID.\r\n *\r\n * @param enabled If true, collection is enabled for this ID.\r\n */\n\n\nfunction _setAnalyticsCollectionEnabled(initializationPromise, enabled) {\n  return __awaiter(this, void 0, void 0, function () {\n    var measurementId;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , initializationPromise];\n\n        case 1:\n          measurementId = _a.sent();\n          window[\"ga-disable-\" + measurementId] = !enabled;\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar logger = new Logger('@firebase/analytics');\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Inserts gtag script tag into the page to asynchronously download gtag.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\n\nfunction insertScriptTag(dataLayerName) {\n  var script = document.createElement('script'); // We are not providing an analyticsId in the URL because it would trigger a `page_view`\n  // without fid. We will initialize ga-id using gtag (config) command together with fid.\n\n  script.src = GTAG_URL + \"?l=\" + dataLayerName;\n  script.async = true;\n  document.head.appendChild(script);\n}\n/**\r\n * Get reference to, or create, global datalayer.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\n\n\nfunction getOrCreateDataLayer(dataLayerName) {\n  // Check for existing dataLayer and create if needed.\n  var dataLayer = [];\n\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName];\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n\n  return dataLayer;\n}\n/**\r\n * Wrapped gtag logic when gtag is called with 'config' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param measurementId GA Measurement ID to set config for.\r\n * @param gtagParams Gtag config params to set.\r\n */\n\n\nfunction gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams) {\n  return __awaiter(this, void 0, void 0, function () {\n    var correspondingAppId, dynamicConfigResults, foundConfig, e_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          correspondingAppId = measurementIdToAppId[measurementId];\n          _a.label = 1;\n\n        case 1:\n          _a.trys.push([1, 7,, 8]);\n\n          if (!correspondingAppId) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , initializationPromisesMap[correspondingAppId]];\n\n        case 2:\n          _a.sent();\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 3:\n          return [4\n          /*yield*/\n          , Promise.all(dynamicConfigPromisesList)];\n\n        case 4:\n          dynamicConfigResults = _a.sent();\n          foundConfig = dynamicConfigResults.find(function (config) {\n            return config.measurementId === measurementId;\n          });\n          if (!foundConfig) return [3\n          /*break*/\n          , 6];\n          return [4\n          /*yield*/\n          , initializationPromisesMap[foundConfig.appId]];\n\n        case 5:\n          _a.sent();\n\n          _a.label = 6;\n\n        case 6:\n          return [3\n          /*break*/\n          , 8];\n\n        case 7:\n          e_1 = _a.sent();\n          logger.error(e_1);\n          return [3\n          /*break*/\n          , 8];\n\n        case 8:\n          gtagCore(GtagCommand.CONFIG, measurementId, gtagParams);\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * Wrapped gtag logic when gtag is called with 'event' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementId GA Measurement ID to log event to.\r\n * @param gtagParams Params to log with this event.\r\n */\n\n\nfunction gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams) {\n  return __awaiter(this, void 0, void 0, function () {\n    var initializationPromisesToWaitFor, gaSendToList, dynamicConfigResults, _loop_1, _i, gaSendToList_1, sendToId, state_1, e_2;\n\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 4,, 5]);\n\n          initializationPromisesToWaitFor = [];\n          if (!(gtagParams && gtagParams['send_to'])) return [3\n          /*break*/\n          , 2];\n          gaSendToList = gtagParams['send_to']; // Make it an array if is isn't, so it can be dealt with the same way.\n\n          if (!Array.isArray(gaSendToList)) {\n            gaSendToList = [gaSendToList];\n          }\n\n          return [4\n          /*yield*/\n          , Promise.all(dynamicConfigPromisesList)];\n\n        case 1:\n          dynamicConfigResults = _a.sent();\n\n          _loop_1 = function _loop_1(sendToId) {\n            // Any fetched dynamic measurement ID that matches this 'send_to' ID\n            var foundConfig = dynamicConfigResults.find(function (config) {\n              return config.measurementId === sendToId;\n            });\n            var initializationPromise = foundConfig && initializationPromisesMap[foundConfig.appId];\n\n            if (initializationPromise) {\n              initializationPromisesToWaitFor.push(initializationPromise);\n            } else {\n              // Found an item in 'send_to' that is not associated\n              // directly with an FID, possibly a group.  Empty this array,\n              // exit the loop early, and let it get populated below.\n              initializationPromisesToWaitFor = [];\n              return \"break\";\n            }\n          };\n\n          for (_i = 0, gaSendToList_1 = gaSendToList; _i < gaSendToList_1.length; _i++) {\n            sendToId = gaSendToList_1[_i];\n            state_1 = _loop_1(sendToId);\n            if (state_1 === \"break\") break;\n          }\n\n          _a.label = 2;\n\n        case 2:\n          // This will be unpopulated if there was no 'send_to' field , or\n          // if not all entries in the 'send_to' field could be mapped to\n          // a FID. In these cases, wait on all pending initialization promises.\n          if (initializationPromisesToWaitFor.length === 0) {\n            initializationPromisesToWaitFor = Object.values(initializationPromisesMap);\n          } // Run core gtag function with args after all relevant initialization\n          // promises have been resolved.\n\n\n          return [4\n          /*yield*/\n          , Promise.all(initializationPromisesToWaitFor)];\n\n        case 3:\n          // Run core gtag function with args after all relevant initialization\n          // promises have been resolved.\n          _a.sent(); // Workaround for http://b/141370449 - third argument cannot be undefined.\n\n\n          gtagCore(GtagCommand.EVENT, measurementId, gtagParams || {});\n          return [3\n          /*break*/\n          , 5];\n\n        case 4:\n          e_2 = _a.sent();\n          logger.error(e_2);\n          return [3\n          /*break*/\n          , 5];\n\n        case 5:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * Wraps a standard gtag function with extra code to wait for completion of\r\n * relevant initialization promises before sending requests.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n */\n\n\nfunction wrapGtag(gtagCore,\n/**\r\n * Allows wrapped gtag calls to wait on whichever intialization promises are required,\r\n * depending on the contents of the gtag params' `send_to` field, if any.\r\n */\ninitializationPromisesMap,\n/**\r\n * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\r\n * before determining what initialization promises (which include FIDs) to wait for.\r\n */\ndynamicConfigPromisesList,\n/**\r\n * Wrapped gtag config calls can narrow down which initialization promise (with FID)\r\n * to wait for if the measurementId is already fetched, by getting the corresponding appId,\r\n * which is the key for the initialization promises map.\r\n */\nmeasurementIdToAppId) {\n  /**\r\n   * Wrapper around gtag that ensures FID is sent with gtag calls.\r\n   * @param command Gtag command type.\r\n   * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\r\n   * @param gtagParams Params if event is EVENT/CONFIG.\r\n   */\n  function gtagWrapper(command, idOrNameOrParams, gtagParams) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 6,, 7]);\n\n            if (!(command === GtagCommand.EVENT)) return [3\n            /*break*/\n            , 2]; // If EVENT, second arg must be measurementId.\n\n            return [4\n            /*yield*/\n            , gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, idOrNameOrParams, gtagParams)];\n\n          case 1:\n            // If EVENT, second arg must be measurementId.\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 2:\n            if (!(command === GtagCommand.CONFIG)) return [3\n            /*break*/\n            , 4]; // If CONFIG, second arg must be measurementId.\n\n            return [4\n            /*yield*/\n            , gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, idOrNameOrParams, gtagParams)];\n\n          case 3:\n            // If CONFIG, second arg must be measurementId.\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            // If SET, second arg must be params.\n            gtagCore(GtagCommand.SET, idOrNameOrParams);\n            _a.label = 5;\n\n          case 5:\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            e_3 = _a.sent();\n            logger.error(e_3);\n            return [3\n            /*break*/\n            , 7];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }\n\n  return gtagWrapper;\n}\n/**\r\n * Creates global gtag function or wraps existing one if found.\r\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\r\n * 'event' calls that belong to the GAID associated with this Firebase instance.\r\n *\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param dataLayerName Name of global GA datalayer array.\r\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\r\n */\n\n\nfunction wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagFunctionName) {\n  // Create a basic core gtag function\n  var gtagCore = function gtagCore() {\n    var _args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      _args[_i] = arguments[_i];\n    } // Must push IArguments object, not an array.\n\n\n    window[dataLayerName].push(arguments);\n  }; // Replace it with existing one if found\n\n\n  if (window[gtagFunctionName] && typeof window[gtagFunctionName] === 'function') {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n\n  window[gtagFunctionName] = wrapGtag(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId);\n  return {\n    gtagCore: gtagCore,\n    wrappedGtag: window[gtagFunctionName]\n  };\n}\n/**\r\n * Returns first script tag in DOM matching our gtag url pattern.\r\n */\n\n\nfunction findGtagScriptOnPage() {\n  var scriptTags = window.document.getElementsByTagName('script');\n\n  for (var _i = 0, _a = Object.values(scriptTags); _i < _a.length; _i++) {\n    var tag = _a[_i];\n\n    if (tag.src && tag.src.includes(GTAG_URL)) {\n      return tag;\n    }\n  }\n\n  return null;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar _a;\n\nvar ERRORS = (_a = {}, _a[\"already-exists\"\n/* ALREADY_EXISTS */\n] = 'A Firebase Analytics instance with the appId {$id} ' + ' already exists. ' + 'Only one Firebase Analytics instance can be created for each appId.', _a[\"already-initialized\"\n/* ALREADY_INITIALIZED */\n] = 'Firebase Analytics has already been initialized.' + 'settings() must be called before initializing any Analytics instance' + 'or it will have no effect.', _a[\"interop-component-reg-failed\"\n/* INTEROP_COMPONENT_REG_FAILED */\n] = 'Firebase Analytics Interop Component failed to instantiate: {$reason}', _a[\"invalid-analytics-context\"\n/* INVALID_ANALYTICS_CONTEXT */\n] = 'Firebase Analytics is not supported in this environment. ' + 'Wrap initialization of analytics in analytics.isSupported() ' + 'to prevent initialization in unsupported environments. Details: {$errorInfo}', _a[\"indexeddb-unavailable\"\n/* INDEXEDDB_UNAVAILABLE */\n] = 'IndexedDB unavailable or restricted in this environment. ' + 'Wrap initialization of analytics in analytics.isSupported() ' + 'to prevent initialization in unsupported environments. Details: {$errorInfo}', _a[\"fetch-throttle\"\n/* FETCH_THROTTLE */\n] = 'The config fetch request timed out while in an exponential backoff state.' + ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.', _a[\"config-fetch-failed\"\n/* CONFIG_FETCH_FAILED */\n] = 'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}', _a[\"no-api-key\"\n/* NO_API_KEY */\n] = 'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' + 'contain a valid API key.', _a[\"no-app-id\"\n/* NO_APP_ID */\n] = 'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' + 'contain a valid app ID.', _a);\nvar ERROR_FACTORY = new ErrorFactory('analytics', 'Analytics', ERRORS);\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Backoff factor for 503 errors, which we want to be conservative about\r\n * to avoid overloading servers. Each retry interval will be\r\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\r\n * will be ~30 seconds (with fuzzing).\r\n */\n\nvar LONG_RETRY_FACTOR = 30;\n/**\r\n * Base wait interval to multiplied by backoffFactor^backoffCount.\r\n */\n\nvar BASE_INTERVAL_MILLIS = 1000;\n/**\r\n * Stubbable retry data storage class.\r\n */\n\nvar RetryData =\n/** @class */\nfunction () {\n  function RetryData(throttleMetadata, intervalMillis) {\n    if (throttleMetadata === void 0) {\n      throttleMetadata = {};\n    }\n\n    if (intervalMillis === void 0) {\n      intervalMillis = BASE_INTERVAL_MILLIS;\n    }\n\n    this.throttleMetadata = throttleMetadata;\n    this.intervalMillis = intervalMillis;\n  }\n\n  RetryData.prototype.getThrottleMetadata = function (appId) {\n    return this.throttleMetadata[appId];\n  };\n\n  RetryData.prototype.setThrottleMetadata = function (appId, metadata) {\n    this.throttleMetadata[appId] = metadata;\n  };\n\n  RetryData.prototype.deleteThrottleMetadata = function (appId) {\n    delete this.throttleMetadata[appId];\n  };\n\n  return RetryData;\n}();\n\nvar defaultRetryData = new RetryData();\n/**\r\n * Set GET request headers.\r\n * @param apiKey App API key.\r\n */\n\nfunction getHeaders(apiKey) {\n  return new Headers({\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n/**\r\n * Fetches dynamic config from backend.\r\n * @param app Firebase app to fetch config for.\r\n */\n\n\nfunction fetchDynamicConfig(appFields) {\n  var _a;\n\n  return __awaiter(this, void 0, void 0, function () {\n    var appId, apiKey, request, appUrl, response, errorMessage, jsonResponse, _ignored_1;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          appId = appFields.appId, apiKey = appFields.apiKey;\n          request = {\n            method: 'GET',\n            headers: getHeaders(apiKey)\n          };\n          appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\n          return [4\n          /*yield*/\n          , fetch(appUrl, request)];\n\n        case 1:\n          response = _b.sent();\n          if (!(response.status !== 200 && response.status !== 304)) return [3\n          /*break*/\n          , 6];\n          errorMessage = '';\n          _b.label = 2;\n\n        case 2:\n          _b.trys.push([2, 4,, 5]);\n\n          return [4\n          /*yield*/\n          , response.json()];\n\n        case 3:\n          jsonResponse = _b.sent();\n\n          if ((_a = jsonResponse.error) === null || _a === void 0 ? void 0 : _a.message) {\n            errorMessage = jsonResponse.error.message;\n          }\n\n          return [3\n          /*break*/\n          , 5];\n\n        case 4:\n          _ignored_1 = _b.sent();\n          return [3\n          /*break*/\n          , 5];\n\n        case 5:\n          throw ERROR_FACTORY.create(\"config-fetch-failed\"\n          /* CONFIG_FETCH_FAILED */\n          , {\n            httpStatus: response.status,\n            responseMessage: errorMessage\n          });\n\n        case 6:\n          return [2\n          /*return*/\n          , response.json()];\n      }\n    });\n  });\n}\n/**\r\n * Fetches dynamic config from backend, retrying if failed.\r\n * @param app Firebase app to fetch config for.\r\n */\n\n\nfunction fetchDynamicConfigWithRetry(app, // retryData and timeoutMillis are parameterized to allow passing a different value for testing.\nretryData, timeoutMillis) {\n  if (retryData === void 0) {\n    retryData = defaultRetryData;\n  }\n\n  return __awaiter(this, void 0, void 0, function () {\n    var _a, appId, apiKey, measurementId, throttleMetadata, signal;\n\n    var _this = this;\n\n    return __generator(this, function (_b) {\n      _a = app.options, appId = _a.appId, apiKey = _a.apiKey, measurementId = _a.measurementId;\n\n      if (!appId) {\n        throw ERROR_FACTORY.create(\"no-app-id\"\n        /* NO_APP_ID */\n        );\n      }\n\n      if (!apiKey) {\n        if (measurementId) {\n          return [2\n          /*return*/\n          , {\n            measurementId: measurementId,\n            appId: appId\n          }];\n        }\n\n        throw ERROR_FACTORY.create(\"no-api-key\"\n        /* NO_API_KEY */\n        );\n      }\n\n      throttleMetadata = retryData.getThrottleMetadata(appId) || {\n        backoffCount: 0,\n        throttleEndTimeMillis: Date.now()\n      };\n      signal = new AnalyticsAbortSignal();\n      setTimeout(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n            signal.abort();\n            return [2\n            /*return*/\n            ];\n          });\n        });\n      }, timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS);\n      return [2\n      /*return*/\n      , attemptFetchDynamicConfigWithRetry({\n        appId: appId,\n        apiKey: apiKey,\n        measurementId: measurementId\n      }, throttleMetadata, signal, retryData)];\n    });\n  });\n}\n/**\r\n * Runs one retry attempt.\r\n * @param appFields Necessary app config fields.\r\n * @param throttleMetadata Ongoing metadata to determine throttling times.\r\n * @param signal Abort signal.\r\n */\n\n\nfunction attemptFetchDynamicConfigWithRetry(appFields, _a, signal, retryData // for testing\n) {\n  var throttleEndTimeMillis = _a.throttleEndTimeMillis,\n      backoffCount = _a.backoffCount;\n\n  if (retryData === void 0) {\n    retryData = defaultRetryData;\n  }\n\n  return __awaiter(this, void 0, void 0, function () {\n    var appId, measurementId, e_1, response, e_2, backoffMillis, throttleMetadata;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          appId = appFields.appId, measurementId = appFields.measurementId;\n          _b.label = 1;\n\n        case 1:\n          _b.trys.push([1, 3,, 4]);\n\n          return [4\n          /*yield*/\n          , setAbortableTimeout(signal, throttleEndTimeMillis)];\n\n        case 2:\n          _b.sent();\n\n          return [3\n          /*break*/\n          , 4];\n\n        case 3:\n          e_1 = _b.sent();\n\n          if (measurementId) {\n            logger.warn(\"Timed out fetching this Firebase app's measurement ID from the server.\" + (\" Falling back to the measurement ID \" + measurementId) + (\" provided in the \\\"measurementId\\\" field in the local Firebase config. [\" + e_1.message + \"]\"));\n            return [2\n            /*return*/\n            , {\n              appId: appId,\n              measurementId: measurementId\n            }];\n          }\n\n          throw e_1;\n\n        case 4:\n          _b.trys.push([4, 6,, 7]);\n\n          return [4\n          /*yield*/\n          , fetchDynamicConfig(appFields)];\n\n        case 5:\n          response = _b.sent(); // Note the SDK only clears throttle state if response is success or non-retriable.\n\n          retryData.deleteThrottleMetadata(appId);\n          return [2\n          /*return*/\n          , response];\n\n        case 6:\n          e_2 = _b.sent();\n\n          if (!isRetriableError(e_2)) {\n            retryData.deleteThrottleMetadata(appId);\n\n            if (measurementId) {\n              logger.warn(\"Failed to fetch this Firebase app's measurement ID from the server.\" + (\" Falling back to the measurement ID \" + measurementId) + (\" provided in the \\\"measurementId\\\" field in the local Firebase config. [\" + e_2.message + \"]\"));\n              return [2\n              /*return*/\n              , {\n                appId: appId,\n                measurementId: measurementId\n              }];\n            } else {\n              throw e_2;\n            }\n          }\n\n          backoffMillis = Number(e_2.customData.httpStatus) === 503 ? calculateBackoffMillis(backoffCount, retryData.intervalMillis, LONG_RETRY_FACTOR) : calculateBackoffMillis(backoffCount, retryData.intervalMillis);\n          throttleMetadata = {\n            throttleEndTimeMillis: Date.now() + backoffMillis,\n            backoffCount: backoffCount + 1\n          }; // Persists state.\n\n          retryData.setThrottleMetadata(appId, throttleMetadata);\n          logger.debug(\"Calling attemptFetch again in \" + backoffMillis + \" millis\");\n          return [2\n          /*return*/\n          , attemptFetchDynamicConfigWithRetry(appFields, throttleMetadata, signal, retryData)];\n\n        case 7:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * Supports waiting on a backoff by:\r\n *\r\n * <ul>\r\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\r\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\r\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\r\n *       request appear the same.</li>\r\n * </ul>\r\n *\r\n * <p>Visible for testing.\r\n */\n\n\nfunction setAbortableTimeout(signal, throttleEndTimeMillis) {\n  return new Promise(function (resolve, reject) {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    var backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n    var timeout = setTimeout(resolve, backoffMillis); // Adds listener, rather than sets onabort, because signal is a shared object.\n\n    signal.addEventListener(function () {\n      clearTimeout(timeout); // If the request completes before this timeout, the rejection has no effect.\n\n      reject(ERROR_FACTORY.create(\"fetch-throttle\"\n      /* FETCH_THROTTLE */\n      , {\n        throttleEndTimeMillis: throttleEndTimeMillis\n      }));\n    });\n  });\n}\n/**\r\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\r\n */\n\n\nfunction isRetriableError(e) {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  } // Uses string index defined by ErrorData, which FirebaseError implements.\n\n\n  var httpStatus = Number(e.customData['httpStatus']);\n  return httpStatus === 429 || httpStatus === 500 || httpStatus === 503 || httpStatus === 504;\n}\n/**\r\n * Shims a minimal AbortSignal (copied from Remote Config).\r\n *\r\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\r\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\r\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\r\n * swapped out if/when we do.\r\n */\n\n\nvar AnalyticsAbortSignal =\n/** @class */\nfunction () {\n  function AnalyticsAbortSignal() {\n    this.listeners = [];\n  }\n\n  AnalyticsAbortSignal.prototype.addEventListener = function (listener) {\n    this.listeners.push(listener);\n  };\n\n  AnalyticsAbortSignal.prototype.abort = function () {\n    this.listeners.forEach(function (listener) {\n      return listener();\n    });\n  };\n\n  return AnalyticsAbortSignal;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction validateIndexedDB() {\n  return __awaiter(this, void 0, void 0, function () {\n    var e_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!!isIndexedDBAvailable()) return [3\n          /*break*/\n          , 1];\n          logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\"\n          /* INDEXEDDB_UNAVAILABLE */\n          , {\n            errorInfo: 'IndexedDB is not available in this environment.'\n          }).message);\n          return [2\n          /*return*/\n          , false];\n\n        case 1:\n          _a.trys.push([1, 3,, 4]);\n\n          return [4\n          /*yield*/\n          , validateIndexedDBOpenable()];\n\n        case 2:\n          _a.sent();\n\n          return [3\n          /*break*/\n          , 4];\n\n        case 3:\n          e_1 = _a.sent();\n          logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\"\n          /* INDEXEDDB_UNAVAILABLE */\n          , {\n            errorInfo: e_1\n          }).message);\n          return [2\n          /*return*/\n          , false];\n\n        case 4:\n          return [2\n          /*return*/\n          , true];\n      }\n    });\n  });\n}\n/**\r\n * Initialize the analytics instance in gtag.js by calling config command with fid.\r\n *\r\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\r\n * part of the `page_view` event that's sent during the initialization\r\n * @param app Firebase app\r\n * @param gtagCore The gtag function that's not wrapped.\r\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\r\n * @param measurementIdToAppId Maps measurementID to appID.\r\n * @param installations FirebaseInstallations instance.\r\n *\r\n * @returns Measurement ID.\r\n */\n\n\nfunction initializeIds(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCore) {\n  return __awaiter(this, void 0, void 0, function () {\n    var dynamicConfigPromise, fidPromise, _a, dynamicConfig, fid, configProperties;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          dynamicConfigPromise = fetchDynamicConfigWithRetry(app); // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\n\n          dynamicConfigPromise.then(function (config) {\n            measurementIdToAppId[config.measurementId] = config.appId;\n\n            if (app.options.measurementId && config.measurementId !== app.options.measurementId) {\n              logger.warn(\"The measurement ID in the local Firebase config (\" + app.options.measurementId + \")\" + (\" does not match the measurement ID fetched from the server (\" + config.measurementId + \").\") + \" To ensure analytics events are always sent to the correct Analytics property,\" + \" update the\" + \" measurement ID field in the local config or remove it from the local config.\");\n            }\n          }).catch(function (e) {\n            return logger.error(e);\n          }); // Add to list to track state of all dynamic config promises.\n\n          dynamicConfigPromisesList.push(dynamicConfigPromise);\n          fidPromise = validateIndexedDB().then(function (envIsValid) {\n            if (envIsValid) {\n              return installations.getId();\n            } else {\n              return undefined;\n            }\n          });\n          return [4\n          /*yield*/\n          , Promise.all([dynamicConfigPromise, fidPromise])];\n\n        case 1:\n          _a = _c.sent(), dynamicConfig = _a[0], fid = _a[1]; // This command initializes gtag.js and only needs to be called once for the entire web app,\n          // but since it is idempotent, we can call it multiple times.\n          // We keep it together with other initialization logic for better code structure.\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n          gtagCore('js', new Date());\n          configProperties = (_b = {}, // guard against developers accidentally setting properties with prefix `firebase_`\n          _b[ORIGIN_KEY] = 'firebase', _b.update = true, _b);\n\n          if (fid != null) {\n            configProperties[GA_FID_KEY] = fid;\n          } // It should be the first config command called on this GA-ID\n          // Initialize this GA-ID and set FID on it using the gtag config API.\n\n\n          gtagCore(GtagCommand.CONFIG, dynamicConfig.measurementId, configProperties);\n          return [2\n          /*return*/\n          , dynamicConfig.measurementId];\n      }\n    });\n  });\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\r\n * all or some of these, depending on the call's `send_to` param and the status\r\n * of the dynamic config fetches (see below).\r\n */\n\n\nvar initializationPromisesMap = {};\n/**\r\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\r\n * wait on all these to be complete in order to determine if it can selectively\r\n * wait for only certain initialization (FID) promises or if it must wait for all.\r\n */\n\nvar dynamicConfigPromisesList = [];\n/**\r\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\r\n * fetch completes. If already populated, gtag config calls can use this to\r\n * selectively wait for only this app's initialization promise (FID) instead of all\r\n * initialization promises.\r\n */\n\nvar measurementIdToAppId = {};\n/**\r\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\r\n */\n\nvar dataLayerName = 'dataLayer';\n/**\r\n * Name for window global gtag function used by GA: defaults to 'gtag'.\r\n */\n\nvar gtagName = 'gtag';\n/**\r\n * Reproduction of standard gtag function or reference to existing\r\n * gtag function on window object.\r\n */\n\nvar gtagCoreFunction;\n/**\r\n * Wrapper around gtag function that ensures FID is sent with all\r\n * relevant event and config calls.\r\n */\n\nvar wrappedGtagFunction;\n/**\r\n * Flag to ensure page initialization steps (creation or wrapping of\r\n * dataLayer and gtag script) are only run once per page load.\r\n */\n\nvar globalInitDone = false;\n/**\r\n * For testing\r\n */\n\nfunction resetGlobalVars(newGlobalInitDone, newInitializationPromisesMap, newDynamicPromises) {\n  if (newGlobalInitDone === void 0) {\n    newGlobalInitDone = false;\n  }\n\n  if (newInitializationPromisesMap === void 0) {\n    newInitializationPromisesMap = {};\n  }\n\n  if (newDynamicPromises === void 0) {\n    newDynamicPromises = [];\n  }\n\n  globalInitDone = newGlobalInitDone;\n  initializationPromisesMap = newInitializationPromisesMap;\n  dynamicConfigPromisesList = newDynamicPromises;\n  dataLayerName = 'dataLayer';\n  gtagName = 'gtag';\n}\n/**\r\n * For testing\r\n */\n\n\nfunction getGlobalVars() {\n  return {\n    initializationPromisesMap: initializationPromisesMap,\n    dynamicConfigPromisesList: dynamicConfigPromisesList\n  };\n}\n/**\r\n * This must be run before calling firebase.analytics() or it won't\r\n * have any effect.\r\n * @param options Custom gtag and dataLayer names.\r\n */\n\n\nfunction settings(options) {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(\"already-initialized\"\n    /* ALREADY_INITIALIZED */\n    );\n  }\n\n  if (options.dataLayerName) {\n    dataLayerName = options.dataLayerName;\n  }\n\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\n/**\r\n * Returns true if no environment mismatch is found.\r\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\r\n * error that also lists details for each mismatch found.\r\n */\n\n\nfunction warnOnBrowserContextMismatch() {\n  var mismatchedEnvMessages = [];\n\n  if (isBrowserExtension()) {\n    mismatchedEnvMessages.push('This is a browser extension environment.');\n  }\n\n  if (!areCookiesEnabled()) {\n    mismatchedEnvMessages.push('Cookies are not available.');\n  }\n\n  if (mismatchedEnvMessages.length > 0) {\n    var details = mismatchedEnvMessages.map(function (message, index) {\n      return \"(\" + (index + 1) + \") \" + message;\n    }).join(' ');\n    var err = ERROR_FACTORY.create(\"invalid-analytics-context\"\n    /* INVALID_ANALYTICS_CONTEXT */\n    , {\n      errorInfo: details\n    });\n    logger.warn(err.message);\n  }\n}\n\nfunction factory(app, installations) {\n  warnOnBrowserContextMismatch();\n  var appId = app.options.appId;\n\n  if (!appId) {\n    throw ERROR_FACTORY.create(\"no-app-id\"\n    /* NO_APP_ID */\n    );\n  }\n\n  if (!app.options.apiKey) {\n    if (app.options.measurementId) {\n      logger.warn(\"The \\\"apiKey\\\" field is empty in the local Firebase config. This is needed to fetch the latest\" + (\" measurement ID for this Firebase app. Falling back to the measurement ID \" + app.options.measurementId) + \" provided in the \\\"measurementId\\\" field in the local Firebase config.\");\n    } else {\n      throw ERROR_FACTORY.create(\"no-api-key\"\n      /* NO_API_KEY */\n      );\n    }\n  }\n\n  if (initializationPromisesMap[appId] != null) {\n    throw ERROR_FACTORY.create(\"already-exists\"\n    /* ALREADY_EXISTS */\n    , {\n      id: appId\n    });\n  }\n\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n    // Detect if user has already put the gtag <script> tag on this page.\n    if (!findGtagScriptOnPage()) {\n      insertScriptTag(dataLayerName);\n    }\n\n    getOrCreateDataLayer(dataLayerName);\n\n    var _a = wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagName),\n        wrappedGtag = _a.wrappedGtag,\n        gtagCore = _a.gtagCore;\n\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n    globalInitDone = true;\n  } // Async but non-blocking.\n  // This map reflects the completion state of all promises for each appId.\n\n\n  initializationPromisesMap[appId] = initializeIds(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCoreFunction);\n  var analyticsInstance = {\n    app: app,\n    // Public methods return void for API simplicity and to better match gtag,\n    // while internal implementations return promises.\n    logEvent: function logEvent(eventName, eventParams, options) {\n      _logEvent(wrappedGtagFunction, initializationPromisesMap[appId], eventName, eventParams, options).catch(function (e) {\n        return logger.error(e);\n      });\n    },\n    setCurrentScreen: function setCurrentScreen(screenName, options) {\n      _setCurrentScreen(wrappedGtagFunction, initializationPromisesMap[appId], screenName, options).catch(function (e) {\n        return logger.error(e);\n      });\n    },\n    setUserId: function setUserId(id, options) {\n      _setUserId(wrappedGtagFunction, initializationPromisesMap[appId], id, options).catch(function (e) {\n        return logger.error(e);\n      });\n    },\n    setUserProperties: function setUserProperties(properties, options) {\n      _setUserProperties(wrappedGtagFunction, initializationPromisesMap[appId], properties, options).catch(function (e) {\n        return logger.error(e);\n      });\n    },\n    setAnalyticsCollectionEnabled: function setAnalyticsCollectionEnabled(enabled) {\n      _setAnalyticsCollectionEnabled(initializationPromisesMap[appId], enabled).catch(function (e) {\n        return logger.error(e);\n      });\n    },\n    INTERNAL: {\n      delete: function _delete() {\n        delete initializationPromisesMap[appId];\n        return Promise.resolve();\n      }\n    }\n  };\n  return analyticsInstance;\n}\n\nvar name = \"@firebase/analytics\";\nvar version = \"0.6.2\";\n/**\r\n * Type constant for Firebase Analytics.\r\n */\n\nvar ANALYTICS_TYPE = 'analytics';\n\nfunction registerAnalytics(instance) {\n  instance.INTERNAL.registerComponent(new Component(ANALYTICS_TYPE, function (container) {\n    // getImmediate for FirebaseApp will always succeed\n    var app = container.getProvider('app').getImmediate();\n    var installations = container.getProvider('installations').getImmediate();\n    return factory(app, installations);\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ).setServiceProps({\n    settings: settings,\n    EventName: EventName,\n    isSupported: isSupported\n  }));\n  instance.INTERNAL.registerComponent(new Component('analytics-internal', internalFactory, \"PRIVATE\"\n  /* PRIVATE */\n  ));\n  instance.registerVersion(name, version);\n\n  function internalFactory(container) {\n    try {\n      var analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\n      return {\n        logEvent: analytics.logEvent\n      };\n    } catch (e) {\n      throw ERROR_FACTORY.create(\"interop-component-reg-failed\"\n      /* INTEROP_COMPONENT_REG_FAILED */\n      , {\n        reason: e\n      });\n    }\n  }\n}\n\nregisterAnalytics(firebase);\n/**\r\n * this is a public static method provided to users that wraps four different checks:\r\n *\r\n * 1. check if it's not a browser extension environment.\r\n * 1. check if cookie is enabled in current browser.\r\n * 3. check if IndexedDB is supported by the browser environment.\r\n * 4. check if the current browser context is valid for using IndexedDB.\r\n *\r\n */\n\nfunction isSupported() {\n  return __awaiter(this, void 0, void 0, function () {\n    var isDBOpenable, error_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (isBrowserExtension()) {\n            return [2\n            /*return*/\n            , false];\n          }\n\n          if (!areCookiesEnabled()) {\n            return [2\n            /*return*/\n            , false];\n          }\n\n          if (!isIndexedDBAvailable()) {\n            return [2\n            /*return*/\n            , false];\n          }\n\n          _a.label = 1;\n\n        case 1:\n          _a.trys.push([1, 3,, 4]);\n\n          return [4\n          /*yield*/\n          , validateIndexedDBOpenable()];\n\n        case 2:\n          isDBOpenable = _a.sent();\n          return [2\n          /*return*/\n          , isDBOpenable];\n\n        case 3:\n          error_1 = _a.sent();\n          return [2\n          /*return*/\n          , false];\n\n        case 4:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nexport { factory, getGlobalVars, registerAnalytics, resetGlobalVars, settings };"],"sourceRoot":""}