type User @aws_api_key @aws_cognito_user_pools {
  id: ID!
  accountType: String!
  bookmarks: [Bookmark]
  metadata: UserMetadata
  owner: String!
  onMailingList: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type UserMetadata @aws_api_key @aws_cognito_user_pools {
  cognitoUsername: String
  cognitoUserPoolId: String
  stripeId: String
}

type Bookmark @aws_api_key @aws_cognito_user_pools {
  id: ID!
  userId: ID!
  name: String!
  path: String!
  pinned: String!
  branch: String!
  repo: String!
  owner: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Mutation {
  cancelSubscription: CancelSubscriptionResponse
  syncUser: SyncUserResponse
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_cognito_user_pools
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_cognito_user_pools
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_cognito_user_pools
  createBookmark(input: CreateBookmarkInput!, condition: ModelBookmarkConditionInput): Bookmark @aws_api_key @aws_cognito_user_pools
  updateBookmark(input: UpdateBookmarkInput!, condition: ModelBookmarkConditionInput): Bookmark @aws_api_key @aws_cognito_user_pools
  deleteBookmark(input: DeleteBookmarkInput!, condition: ModelBookmarkConditionInput): Bookmark @aws_api_key @aws_cognito_user_pools
}

type CancelSubscriptionResponse {
  id: String!
}

type SyncUserResponse {
  id: String!
}

input UserMetadataInput {
  cognitoUsername: String
  cognitoUserPoolId: String
  stripeId: String
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserConnection @aws_api_key @aws_cognito_user_pools {
  items: [User]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelUserFilterInput {
  id: ModelIDInput
  accountType: ModelStringInput
  owner: ModelStringInput
  onMailingList: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getUser(id: ID!): User @aws_api_key @aws_cognito_user_pools
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection @aws_api_key @aws_cognito_user_pools
  getBookmark(id: ID!): Bookmark @aws_api_key @aws_cognito_user_pools
  listBookmarks(filter: ModelBookmarkFilterInput, limit: Int, nextToken: String): ModelBookmarkConnection @aws_api_key @aws_cognito_user_pools
}

input CreateUserInput {
  id: ID
  accountType: String!
  metadata: UserMetadataInput
  owner: String!
  onMailingList: String
}

input UpdateUserInput {
  id: ID!
  accountType: String
  metadata: UserMetadataInput
  owner: String
  onMailingList: String
}

input DeleteUserInput {
  id: ID
}

input ModelUserConditionInput {
  accountType: ModelStringInput
  onMailingList: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

type Subscription {
  onCreateUser(owner: String): User @aws_subscribe(mutations: ["createUser"]) @aws_api_key @aws_cognito_user_pools
  onUpdateUser(owner: String): User @aws_subscribe(mutations: ["updateUser"]) @aws_api_key @aws_cognito_user_pools
  onDeleteUser(owner: String): User @aws_subscribe(mutations: ["deleteUser"]) @aws_api_key @aws_cognito_user_pools
  onCreateBookmark(owner: String): Bookmark @aws_subscribe(mutations: ["createBookmark"]) @aws_api_key @aws_cognito_user_pools
  onUpdateBookmark(owner: String): Bookmark @aws_subscribe(mutations: ["updateBookmark"]) @aws_api_key @aws_cognito_user_pools
  onDeleteBookmark(owner: String): Bookmark @aws_subscribe(mutations: ["deleteBookmark"]) @aws_api_key @aws_cognito_user_pools
}

type ModelBookmarkConnection @aws_api_key @aws_cognito_user_pools {
  items: [Bookmark]
  nextToken: String
}

input ModelBookmarkFilterInput {
  id: ModelIDInput
  userId: ModelIDInput
  name: ModelStringInput
  path: ModelStringInput
  pinned: ModelStringInput
  branch: ModelStringInput
  repo: ModelStringInput
  owner: ModelStringInput
  and: [ModelBookmarkFilterInput]
  or: [ModelBookmarkFilterInput]
  not: ModelBookmarkFilterInput
}

input CreateBookmarkInput {
  id: ID
  userId: ID!
  name: String!
  path: String!
  pinned: String!
  branch: String!
  repo: String!
  owner: String!
}

input UpdateBookmarkInput {
  id: ID!
  userId: ID
  name: String
  path: String
  pinned: String
  branch: String
  repo: String
  owner: String
}

input DeleteBookmarkInput {
  id: ID
}

input ModelBookmarkConditionInput {
  userId: ModelIDInput
  name: ModelStringInput
  path: ModelStringInput
  pinned: ModelStringInput
  branch: ModelStringInput
  repo: ModelStringInput
  and: [ModelBookmarkConditionInput]
  or: [ModelBookmarkConditionInput]
  not: ModelBookmarkConditionInput
}
